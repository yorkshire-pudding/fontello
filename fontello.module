<?php

/**
 * @file fontello.module
 * Provides the ability to integrate custom font icons via the Fontello (http://fontello.com) service into your site.
 */

/**
 * Implements hook_init().
 */
function fontello_init() {
  fontello_add_css();
}

/**
 * Implements hook_menu().
 */
function fontello_menu() {
  $items = array();
  $items['admin/appearance/fontello'] = array(
    'title' => 'Fontello',
    'description' =>  'Provides the overview of configuration options for Fontello.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fontello_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'fontello.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/appearance/fontello/config'] = array(
    'title' => 'config.json',
    'page callback' => 'fontello_config_callback',
    'page arguments' => array(),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function fontello_theme($existing, $type, $theme, $path) {
  return array(
    'fontello_icon' => array(
      'variables' => array(
        'attributes' => array(),
        'icon' => NULL,
      ),
    ),
  );
}

/**
 * Helper function to return the configuration file.
 *
 * @param bool $process
 *   If set to TRUE, the configuration file will be processed.
 * @param bool $reset
 *   Resets the array and forces a complete rebuild.
 *
 * @return string|array
 *   Returns path to config file. If $process is set to
 *   TRUE, returns an associative array. Returns FALSE
 *   if no configuration file can be found.
 */
function fontello_config($process = FALSE, $reset = FALSE) {
  $file = &drupal_static(__FUNCTION__ . '_file');
  if ($reset || !isset($file)) {
    $file = FALSE;
    if ($fontello_dir = variable_get('fontello_dir', NULL)) {
      $file = 'public://fontello/' . $fontello_dir . '/config.json';
      if (!file_exists($file)) {
        $file = FALSE;
      }
    }
  }
  if ($file && $process) {
    $config = &drupal_static(__FUNCTION__ . '_config');
    if ($reset || !isset($config)) {
      $config = drupal_json_decode(file_get_contents($file));
    }
    return $config;
  }
  return $file;
}

/**
 * Callback for downloading the webfont bundle configuration file.
 */
function fontello_config_callback() {
  if ($config = fontello_config()) {
    global $user;
    $file = new stdClass();
    $file->fid = NULL;
    $file->uri = $config;
    $file->filename = drupal_basename($file->uri);
    $file->filemime = file_get_mimetype($file->uri);
    $file->filesize = filesize($file->uri);
    $file->uid = $user->uid;
    $file->status = FILE_STATUS_PERMANENT;
    file_transfer($file->uri, file_get_content_headers($file));
  }
  drupal_not_found();
}

/**
 * Helper function to import a webfont bundle.
 *
 * @param object $file
 *   The file object provided from a form submission.
 *
 * @return
 *   TRUE if bundle was successfully imported or in the event of a failed
 *   import an error message will be returned.
 */
function fontello_import_bundle($file) {
  // Determine the new Fontello directory.
  $fontello_dir = substr($file->filename, 0, strpos($file->filename, '.'));
  // Prepare the directory
  $archive_destination = 'public://fontello';
  file_prepare_directory($archive_destination);
  // Extract the files.
  module_load_include('inc', 'update', 'update.manager');
  try {
    $archive = update_manager_archive_extract(drupal_realpath($file->uri), drupal_realpath($archive_destination));
  }
  catch (Exception $e) {
    return $e->getMessage();
  }
  $files = $archive->listContents();
  if (!$files || !in_array($fontello_dir . '/config.json', $files)) {
    file_unmanaged_delete_recursive('public://fontello/' . $fontello_dir);
    return t('The bundle uploaded does not contain the required %config file provided by !fontello.', array(
      '%config' => 'config.json',
      '!fontello' => l('Fontello', 'http://fontello.com'),
    ));
  }
  // Delete the previous fontello directory, if it exists.
  $current_fontello_dir = variable_get('fontello_dir', NULL);
  if ($current_fontello_dir && $fontello_dir !== $current_fontello_dir) {
    fontello_remove_bundle('public://fontello/' . $current_fontello_dir);
  }
  // Save the new fontello directory in a variable.
  variable_set('fontello_dir', $fontello_dir);
  // Delete the temporary archive file.
  file_delete($file);
  return TRUE;
}

/**
 * Helper function to remove an existing webfont bundle.
 */
function fontello_remove_bundle($path = NULL) {
  if (empty($path) && $fontello_dir = variable_get('fontello_dir', NULL)) {
    $path = 'public://fontello/' . $fontello_dir;
  }
  if (!empty($path) && file_exists($path)) {
    if (!file_unmanaged_delete_recursive($path)) {
      drupal_set_error(t('An error occured when attempting to remove the following Fontello webfont bundle: %path', array('%path' => drupal_realpath($path))), 'error', FALSE);
    }
  }
  variable_del('fontello_dir');
}

/**
 * Helper function to return all available icons.
 *
 * @param bool $reset
 *   Resets the array and forces a complete rebuild.
 */
function fontello_get_icons($reset = FALSE) {
  $icons = array();
  if ($config = fontello_config(TRUE, $reset)) {
    if (isset($config['glyphs'])) {
      foreach ($config['glyphs'] as $icon) {
        $icons[$icon['css']] = $icon;
      }
    }
  }
  // Alphebetically sort the icons.
  ksort($icons);
  return $icons;
}

/**
 * Helper function to determine the proper CSS files to add.
 *
 * @param bool $reset
 *   Resets the array and forces a complete rebuild.
 */
function fontello_get_css($reset = FALSE) {
  $css = &drupal_static(__FUNCTION__);
  if (!isset($css) || $reset) {
    $css = array();
    if ($fontello_dir = variable_get('fontello_dir', NULL)) {
      $css_dir = 'public://fontello/' . $fontello_dir . '/css';
      $method = variable_get('fontello_method', 0);
      // Determine which include method to use.
      $methods = array(
        0 => 'fontello.css',
        1 => 'fontello-embedded.css',
        2 => 'fontello-codes.css',
      );
      $css[$css_dir . '/' . $methods[$method]] = array(
        'type' => 'file',
        'every_page' => TRUE,
      );
      // Determine whether to include animation support.
      if (variable_get('fontello_animation', TRUE)) {
        $css[$css_dir . '/animation.css'] = array(
          'type' => 'file',
          'variable' => 'fontello_animation',
          'every_page' => TRUE,
        );
      }
      // Determine whether to include IE7 support.
      if (variable_get('fontello_ie7', TRUE)) {
        $ie7 = array(
          0 => 'fontello-ie7.css',
          1 => 'fontello-ie7.css',
          2 => 'fontello-ie7-codes.css',
        );
        $css[$css_dir . '/' . $ie7[$method]] = array(
          'type' => 'file',
          'every_page' => TRUE,
          'browsers' => array(
            'IE' => 'IE 7',
            '!IE' => FALSE
          ),
        );
      }
    }
  }
  return $css;
}


/**
 * Helper function to appropriately add CSS files.
 *
 * @param array $element
 *   The form element to attach the CSS files to.
 * @param bool $reset
 *   Resets the array and forces a complete rebuild.
 */
function fontello_add_css(&$element = NULL, $reset = FALSE) {
  foreach (fontello_get_css($reset) as $file => $options) {
    $options['basename'] = md5($file) . '-' . $file;
    if (!empty($element) && is_array($element)) {
      $element['#attached']['css'][$file] = $options;
    }
    else {
      drupal_add_css($file, $options);
    }
  }
}

/**
 * Implements hook_preprocess_fontello_icon().
 */
function fontello_preprocess_fontello_icon(&$variables) {
  // Default classes.
  $classes = array(
    'icon',
    'icon-' . $variables['icon']['css'],
  );
  // Check for additional classes provided by Fontello (for things like animations).
  if (isset($variables['icon']['css-ext'])) {
    foreach (explode(' ', $variables['icon']['css-ext']) as $css_ext) {
      if (!in_array($css_ext, $classes)) {
        $classes[] = $css_ext;
      }
    }
  }
  // Add classes to array.
  $attributes = &$variables['attributes'];
  if (!isset($attributes['class'])) {
    $attributes['class'] = array();
  }
  foreach ($classes as $class) {
    if (!in_array($class, $attributes['class'])) {
      $attributes['class'][] = $class;
    }
  }
}

/**
 * Theming function for fontello_icon.
 */
function theme_fontello_icon($variables) {
  $element = variable_get('fontello_element', 'i');
  return '<' . $element . drupal_attributes($variables['attributes']) . '></' . $element . '>';
}
