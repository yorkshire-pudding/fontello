<?php

/**
 * @file fontello.module
 * Provides the ability to integrate custom font icons via the Fontello (http://fontello.com) service into your site.
 */

/**
 * Implements hook_init().
 */
function fontello_init() {
  // Only load webfont bundles for non-administrative paths.
  if (!path_is_admin(current_path())) {
    fontello_bundle_css_add($GLOBALS['theme_key']);
  }
}

/**
 * Implements hook_menu().
 */
function fontello_menu() {
  $items = array();
  $items['admin/appearance/fontello'] = array(
    'title' => 'Fontello',
    'description' =>  'Provides the overview of configuration options for Fontello.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fontello_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'fontello.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/appearance/fontello/default'] = array(
    'title' => 'Default',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('fontello_admin_form'),
    'access arguments' => array('administer site configuration'),
    'file' => 'fontello.admin.inc',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );
  foreach (list_themes() as $theme) {
    if (!$theme->status) {
      continue;
    }
    $items['admin/appearance/fontello/' . $theme->name] = array(
      'title' => $theme->info['name'],
      'page callback' => 'drupal_get_form',
      'page arguments' => array('fontello_admin_form', $theme->name),
      'access arguments' => array('administer site configuration'),
      'file' => 'fontello.admin.inc',
      'type' => MENU_LOCAL_TASK,
    );
  }
  $items['admin/appearance/fontello/config/%fontello_bundle'] = array(
    'title' => 'config.json',
    'page callback' => 'fontello_download_config_callback',
    'page arguments' => array(4),
    'access arguments' => array('administer site configuration'),
    'type' => MENU_CALLBACK,
  );
  return $items;
}

/**
 * Implements hook_theme().
 */
function fontello_theme($existing, $type, $theme, $path) {
  return array(
    'fontello_icon' => array(
      'variables' => array(
        'attributes' => array(),
        'icon' => NULL,
        'bundle' => NULL,
        'theme' => NULL,
      ),
    ),
    'fontello_list' => array(
      'variables' => array(
        'items' => array(),
        'title' => NULL,
        'type' => 'ul',
        'attributes' => array(),
      ),
    )
  );
}

/**
 * Helper function to add necessary admin icons and CSS files.
 */
function fontello_admin_add_css() {
  $module_path = drupal_get_path('module', 'fontello');
  fontello_bundle_load('fontello-admin-icons', array(
    'custom' => TRUE,
    'filename_prefix' => 'admin-icons',
    'uri' => $module_path,
  ));
  fontello_bundle_css_add('fontello-admin-icons');
  drupal_add_css($module_path . '/css/fontello.admin.css');
}

/**
 * Add CSS files for a webfont bundle.
 *
 * @param string $theme
 *   Name of the specific theme bundle to add.
 * @param array $element
 *   The FAPI element to attach CSS files to if building
 *   a Drupal form.
 * @param bool $reset
 *   Resets the array and forces a complete rebuild.
 */
function fontello_bundle_css_add($theme = 'default', &$element = NULL, $reset = FALSE) {
  foreach (fontello_bundle_css_build($theme, $reset) as $file => $options) {
    // Ensure the basenames are unique (in case multiple bundles are loaded on one page).
    $options['basename'] = md5($file) . '-' . $file;
    if (!empty($element) && is_array($element)) {
      $element['#attached']['css'][$file] = $options;
    }
    else {
      drupal_add_css($file, $options);
    }
  }
}

/**
 * Build CSS files for a webfont bundle.
 *
 * @param string $theme
 *   Name of the specific theme bundle to build.
 * @param bool $reset
 *   Resets the array and forces a complete rebuild.
 *
 * @return array
 *   An associative array containing the bundle CSS files.
 */
function fontello_bundle_css_build($theme = 'default', $reset = FALSE) {
  $css = &drupal_static(__FUNCTION__);
  if (!isset($css)) {
    $css = array();
  }
  if ((!isset($css[$theme]) || $reset)) {
    $css[$theme] = array();
    $bundle = fontello_bundle_load($theme, array(), $reset);
    // Only return filenames for bundles that actually have icons.
    if (!count($bundle['icons'])) {
      return $css[$theme];
    }
    // Determine which include method to use.
    $methods = array(
      0 => $bundle['filename_prefix'] . '.css',
      1 => $bundle['filename_prefix'] . '-embedded.css',
      2 => $bundle['filename_prefix'] . '-codes.css',
    );
    $css[$theme][$bundle['uri'] . '/css/' . $methods[$bundle['method']]] = array(
      'type' => 'file',
      'every_page' => TRUE,
    );
    // Determine whether to include animation support.
    if ($bundle['animation']) {
      $css[$theme][$bundle['uri'] . '/css/animation.css'] = array(
        'type' => 'file',
        'every_page' => TRUE,
      );
    }
    // Determine whether to include IE7 support.
    if ($bundle['ie7']) {
      $ie7 = array(
        0 => $bundle['filename_prefix'] . '-ie7.css',
        1 => $bundle['filename_prefix'] . '-ie7.css',
        2 => $bundle['filename_prefix'] . '-ie7-codes.css',
      );
      $css[$theme][$bundle['uri'] . '/css/' . $ie7[$bundle['method']]] = array(
        'type' => 'file',
        'every_page' => TRUE,
        'browsers' => array(
          'IE' => 'IE 7',
          '!IE' => FALSE
        ),
      );
    }
  }
  return $css[$theme];
}

/**
 * Default bundle settings.
 *
 * @return array
 *   An associative array containing the default bundle settings.
 */
function fontello_bundle_default() {
  return array(
    'animation' => TRUE,
    'config' => FALSE,
    'default' => FALSE,
    'filename_prefix' => NULL,
    'icons' => NULL,
    'ie7' => TRUE,
    'method' => 0,
    'parsed' => FALSE,
    'tag' => 'i',
    'theme' => 'default',
    'uri' => '',
  );
}

/**
 * Helper function to remove an existing webfont bundle.
 *
 * @param string $theme
 *   Name of the specific theme bundle to delete.
 */
function fontello_bundle_delete($theme = 'default') {
  $bundle = fontello_bundle_load($theme);
  if ($bundle['theme'] === $theme && !empty($bundle['uri']) && file_exists($bundle['uri'])) {
    if (!file_unmanaged_delete_recursive($bundle['uri'])) {
      drupal_set_message(t('An error occured when attempting to remove the following Fontello webfont bundle: %path', array('%path' => drupal_realpath($bundle['uri']))), 'error', FALSE);
    }
    variable_del('fontello_' . $theme . '_settings');
  }
}

/**
 * Import a webfont bundle.
 *
 * @param object $file
 *   The file object provided from the form submission.
 * @param array $form_state
 *   An associative array containing the current form states.
 *
 * @return bool|string
 *   TRUE if bundle was successfully imported.
 *   In the event of failure, an error message will be returned instead.
 */
function fontello_bundle_import($file, &$form_state) {
  // Get the appropriate theme to import bundle to.
  $theme = $form_state['build_info']['args'][0];
  // Create a new Fontello bundle array.
  $bundle = fontello_bundle_default();
  $bundle['uri'] = 'public://fontello/' . substr($file->filename, 0, strpos($file->filename, '.'));
  // Prepare the directory
  $archive_destination = 'public://fontello';
  file_prepare_directory($archive_destination);
  // Extract the files.
  module_load_include('inc', 'update', 'update.manager');
  try {
    $archive = update_manager_archive_extract(drupal_realpath($file->uri), drupal_realpath($archive_destination));
  }
  catch (Exception $e) {
    if (file_exists($bundle['uri'])) {
      file_unmanaged_delete_recursive($bundle['uri']);
    }
    file_delete($file);
    return $e->getMessage();
  }
  // Parse bundle.
  fontello_bundle_parse($bundle);
  if (!$bundle['config'] || !count($bundle['icons'])) {
    file_unmanaged_delete_recursive($bundle['uri']);
    return t('The uploaded bundle either does not contain a proper %config file or cannot properly import the icons. Please ensure the bundle uploaded is one provided by !fontello.', array(
      '%config' => 'config.json',
      '!fontello' => l('Fontello', 'http://fontello.com'),
    ));
  }
  // Delete the previous Fontello bundle, if it exists.
  fontello_bundle_delete($theme);
  // Save the new Fontello bundle.
  fontello_bundle_save($theme, $bundle, FALSE);
  // Delete the temporary archive file.
  file_delete($file);
  // Save new bundle as a copy in $form_state.
  $form_state['bundle'] = $bundle;
  return TRUE;
}

/**
 * Load a webfont bundle.
 *
 * @param string $theme
 *   Name of the specific theme bundle to load.
 * @param array $bundle
 *   An array to provide default bundle settings.
 * @param bool $reset
 *   Resets the array and forces a complete rebuild.
 *
 * @return array
 *   An associative array containing the bundle settings.
 */
function fontello_bundle_load($theme = 'default', $bundle = array(), $reset = FALSE) {
  $bundles = &drupal_static(__FUNCTION__);
  if (!isset($bundles) || !isset($bundles[$theme])) {
    $bundle = array_merge(fontello_bundle_default(), $bundle);
    if (!isset($bundle['custom']) || !$bundle['custom']) {
      if ($theme !== 'default' && $theme_bundle = variable_get('fontello_' . $theme . '_settings', array())) {
        $bundle = array_merge($bundle, $theme_bundle);
      }
      else {
        $bundle = array_merge($bundle, variable_get('fontello_default_settings', array()));
        $bundle['default'] = TRUE;
      }
    }
    // Run bundle through parser.
    fontello_bundle_parse($bundle);
    // Add bundle to array of bundles.
    $bundles[$theme] = $bundle;
  }
  return $bundles[$theme];
}

/**
 * Parse a webfont bundle.
 * Extracts the custom filename prefix and icons if necessary.
 *
 * @param array $bundle
 *   A referenced associative array containing the bundle settings.
 */
function fontello_bundle_parse(&$bundle) {
  if (!$bundle['parsed']) {
    $bundle['parsed'] = TRUE;
    if (is_null($bundle['filename_prefix'])) {
      $bundle['filename_prefix'] = 'fontello';
    }
    if (is_null($bundle['icons'])) {
      $bundle['icons'] = array();
    }
    if (!empty($bundle['uri']) && file_exists($bundle['uri'] . '/config.json')) {
      if ($config = drupal_json_decode(file_get_contents($bundle['uri'] . '/config.json'))) {
        $bundle['config'] = TRUE;
        if (!empty($config['name'])) {
          $bundle['filename_prefix'] = $config['name'];
        }
        if (!empty($config['glyphs'])) {
          foreach ($config['glyphs'] as $icon) {
            $bundle['icons'][$icon['css']] = $icon;
          }
          // Alphebetically sort the icons.
          ksort($bundle['icons']);
        }
      }
    }
  }
}

/**
 * Save a webfont bundle.
 *
 * @param string $theme
 *   Name of the specific theme bundle to save.
 * @param array $bundle
 *   An array to provide default bundle settings.
 * @param bool $message
 *   Boolean to determine whether a message should be displayed
 *   after the bundle has been saved.
 */
function fontello_bundle_save($theme = 'default', $bundle = array(), $message = TRUE) {
  $bundle = array_merge(fontello_bundle_default(), $bundle);
  // Run bundle through parser.
  fontello_bundle_parse($bundle);
  // Ensure the theme name gets saved with the data it belongs to.
  $bundle['theme'] = $theme;
  // Save data.
  variable_set('fontello_' . $theme . '_settings', $bundle);
  if ($message) {
    $themes = list_themes();
    $theme_name = $theme === 'default' ? 'the default bundle' : $themes[$theme]->info['name'];
    drupal_set_message(t('Successfully updated Fontello settings for %theme.', array('%theme' => $theme_name)));
  }
}

/**
 * Download a webfont bundle configuration file.
 *
 * @param string $bundle
 *   An associative array containing the bundle settings.
 */
function fontello_download_config_callback($bundle) {
  if ($bundle) {
    global $user;
    $file = new stdClass();
    $file->fid = NULL;
    $file->uri = $bundle['uri'] . '/config.json';
    $file->filename = drupal_basename($bundle['uri']) . '-' . drupal_basename($file->uri);
    $file->filemime = file_get_mimetype($file->uri);
    $file->filesize = filesize($file->uri);
    $file->uid = $user->uid;
    $file->status = FILE_STATUS_PERMANENT;
    file_transfer($file->uri, file_get_content_headers($file));
  }
  drupal_not_found();
}

function fontello_form_icon_select(&$element, &$form_state, $default_value = NULL) {
  $bundle = $form_state['bundle'];
  $fontello_path = drupal_get_path('module', 'fontello');
  $random = mt_rand();
  $options = array('' => '- No Icon -');
  foreach ($bundle['icons'] as $name => $icon) {
    $options[$name] = $name;
  }
  if (!count($bundle['icons'])) {
    return;
  }
  fontello_admin_add_css();
  $element['#attached'] = array(
    'js' => array(
      $fontello_path . '/js/jquery.dropdown.js',
      $fontello_path . '/js/fontello.js',
    ),
  );
  $element['icon'] = array(
    '#type' => 'select',
    '#options' => array_combine(array_keys($options), array_values($options)),
    '#attributes' => array(
      'class' => array('icon-value'),
    ),
    '#prefix' => '<div data-dropdown="#dropdown-' . $random .'" class="fontello-select-icon form-item">',
  );
  if (!empty($default_value)) {
    $element['icon']['#default_value'] = $default_value;
  }
  $element['bundle'] = array(
    '#type' => 'value',
    '#value' => $bundle,
  );
  // Enclose the text with labels and assign class names for JS dropdown.
  foreach ($options as $name => $icon) {
    $options[$name] = array(
      'data' => empty($name) ? '<label>' . $icon . '</label></li><li class="dropdown-divider">' : '<label>' . theme('fontello_icon' , array('icon' => $name, 'bundle' => $bundle)) . ' ' . $icon . '</label>',
      'data-value' => $name,
    );
  }
  $element['icon_dropdown'] = array(
    '#theme' => 'fontello_list',
    '#items' => $options,
    '#attributes' => array('class' => array('dropdown-menu')),
    '#prefix' => '<div id="dropdown-' . $random . '" class="dropdown dropdown-scroll">',
    '#suffix' => '</div></div>',
  );
}

/**
 * Implements hook_preprocess_fontello_icon().
 */
function fontello_preprocess_fontello_icon(&$variables) {
  $theme = &$variables['theme'];
  if (!empty($theme)) {
    $theme = $GLOBALS['theme_key'];
  }
  $bundle = &$variables['bundle'];
  if (empty($bundle)) {
    $bundle = fontello_bundle_load($theme);
  }
  $icon = &$variables['icon'];
  if (isset($bundle['icons'][$icon])) {
    $icon = $bundle['icons'][$icon];
    // Default classes.
    $classes = array('icon');
    if (is_array($icon)) {
      $classes[] = 'icon-' . $icon['css'];
      // Check for additional classes provided by Fontello (for things like animations).
      if (isset($icon['css-ext'])) {
        foreach (explode(' ', $icon['css-ext']) as $css_ext) {
          if (!in_array($css_ext, $classes)) {
            $classes[] = $css_ext;
          }
        }
      }
    }
    // Add classes to array.
    $attributes = &$variables['attributes'];
    if (!isset($attributes['class'])) {
      $attributes['class'] = array();
    }
    foreach ($classes as $class) {
      if (!in_array($class, $attributes['class'])) {
        $attributes['class'][] = $class;
      }
    }
  }
  else {
    drupal_set_message(t('The icon, %icon, supplied to %hook does not exist.', array(
      '%icon' => $icon,
      '%hook' => 'theme("fontello_icon")',
    )), 'error');
    $icon = NULL;
  }
}

function theme_fontello_list($variables) {
  $items = $variables['items'];
  $title = $variables['title'];
  $type = $variables['type'];
  $attributes = $variables['attributes'];

  // Only output the list container and title, if there are any list items.
  // Check to see whether the block title exists before adding a header.
  // Empty headers are not semantic and present accessibility challenges.
  $output = '';
  if (isset($title) && $title !== '') {
    $output .= '<h3>' . $title . '</h3>';
  }

  if (!empty($items)) {
    $output .= "<$type" . drupal_attributes($attributes) . '>';
    $num_items = count($items);
    $i = 0;
    foreach ($items as $item) {
      $attributes = array();
      $children = array();
      $data = '';
      $i++;
      if (is_array($item)) {
        foreach ($item as $key => $value) {
          if ($key == 'data') {
            $data = $value;
          }
          elseif ($key == 'children') {
            $children = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $data = $item;
      }
      if (count($children) > 0) {
        // Render nested list.
        $data .= theme_item_list(array('items' => $children, 'title' => NULL, 'type' => $type, 'attributes' => $attributes));
      }
      if ($i == 1) {
        $attributes['class'][] = 'first';
      }
      if ($i == $num_items) {
        $attributes['class'][] = 'last';
      }
      $output .= '<li' . drupal_attributes($attributes) . '>' . $data . "</li>\n";
    }
    $output .= "</$type>";
  }
  return $output;
}

/**
 * Theming function for fontello_icon.
 */
function theme_fontello_icon($variables) {
  if (!empty($variables['icon'])) {
    return '<' . $variables['bundle']['tag'] . drupal_attributes($variables['attributes']) . '></' . $variables['bundle']['tag'] . '>';
  }
}
