<?php

/**
 * @file fontello.module
 * Integrates the Fontello service as an icon provider for the Icon API.
 */

/**
 * Implements hook_icon_providers().
 */
function fontello_icon_providers() {
  $providers['fontello'] = array(
    'title' => t('Fontello'),
    'url' => 'http://fontello.com',
    'default bundle' => array(
      'render' => 'sprite',
      'settings' => array(
        'animation' => TRUE,
        'filename_prefix' => NULL,
        'ie7' => TRUE,
        'method' => 'default',
        'tag' => 'i',
      ),
    ),
  );
  return $providers;
}

/**
 * Implements hook_icon_import_validate().
 */
function fontello_icon_import_validate(&$bundle) {
  if ($bundle['provider'] === 'fontello' && drupal_json_decode(file_get_contents($bundle['path'] . '/config.json'))) {
    return TRUE;
  }
  return t('The uploaded archive file does not contain a %config file. Ensure this is a proper archive file generated by !fontello.', array(
    '%config' => 'config.json',
    '!fontello' => l('Fontello', 'http://fontello.com'),
  ));
}

function fontello_get_config($path) {
  if (file_exists($path . '/config.json')) {
    return drupal_json_decode(file_get_contents($path . '/config.json'));
  }
  return FALSE;
}

/**
 * Implements hook_icon_import_process().
 */
function fontello_icon_import_process($provider, &$bundle) {
  if ($provider['name'] === 'fontello') {
    if (is_null($bundle['settings']['filename_prefix'])) {
      $bundle['settings']['filename_prefix'] = 'fontello';
    }
    if (!empty($bundle['path']) && file_exists($bundle['path'] . '/config.json')) {
      if ($config = drupal_json_decode(file_get_contents($bundle['path'] . '/config.json'))) {
        if (!empty($config['name'])) {
          $bundle['settings']['filename_prefix'] = $config['name'];
        }
        $bundle['settings']['css_prefix_text'] = $config['css_prefix_text'];
        $bundle['settings']['css_use_suffix'] = $config['css_use_suffix'];
        if (!empty($config['glyphs'])) {
          foreach ($config['glyphs'] as $icon) {
            $bundle['icons'][($config['css_use_suffix'] ? $icon['css'] . $config['css_prefix_text'] : $config['css_prefix_text'] . $icon['css'])] = $icon['css'];
          }
          // Alphebetically sort the icons.
          ksort($bundle['icons']);
          // Add processing callback.
          $bundle['#attached']['fontello_process_attached'] = array(array($bundle));
        }
      }
    }
  }
}

/**
 * Implements hook_preprocess_icon().
 */
function fontello_preprocess_icon(&$variables) {
  if (!empty($variables['bundle']['provider']) && $variables['bundle']['provider'] === 'fontello') {
    $variables['attributes']['class'][] = 'fontello';
  }
}

/**
 * CSS attach callback for a Fontello icon bundle.
 */
function fontello_process_attached($bundle) {
  // Add some CSS for displaying Fontello icons properly. Noteably this helps
  // override the default icon styling packaged with certain base themes like
  // Bootstrap.
  $file = drupal_get_path('module', 'fontello') . '/css/fontello.fix.css';
  $css[$file] = array(
    'type' => 'file',
    'data' => $file,
  );
  // Determine which include method to use.
  $methods = array(
    'default' => $bundle['settings']['filename_prefix'] . '.css',
    'embedded' => $bundle['settings']['filename_prefix'] . '-embedded.css',
    'codes' => $bundle['settings']['filename_prefix'] . '-codes.css',
  );
  $file = $bundle['path'] . '/css/' . $methods[$bundle['settings']['method']];
  $css[$file] = array(
    'type' => 'file',
    'data' => $file,
  );
  // Determine whether to include animation support.
  if ($bundle['settings']['animation']) {
    $file = $bundle['path'] . '/css/animation.css';
    $css[$file] = array(
      'type' => 'file',
      'data' => $file,
    );
  }
  // Determine whether to include IE7 support.
  if ($bundle['settings']['ie7']) {
    $ie7 = array(
      'default' => $bundle['settings']['filename_prefix'] . '-ie7.css',
      'embedded' => $bundle['settings']['filename_prefix'] . '-ie7.css',
      'codes' => $bundle['settings']['filename_prefix'] . '-ie7-codes.css',
    );
    $file = $bundle['path'] . '/css/' . $ie7[$bundle['settings']['method']];
    $css[$file] = array(
      'type' => 'file',
      'data' => $file,
      'browsers' => array(
        'IE' => 'IE 7',
        '!IE' => FALSE
      ),
    );
  }
  foreach ($css as $data => $options) {
    drupal_add_css($data, $options);
  }
}

/**
 * Download a webfont bundle configuration file.
 *
 * @param string $bundle
 *   An associative array containing the bundle settings.
 */
function fontello_download_config_callback($bundle) {
  if ($bundle) {
    global $user;
    $file = new stdClass();
    $file->fid = NULL;
    $file->uri = $bundle['path'] . '/config.json';
    $file->filename = drupal_basename($bundle['path']) . '-' . drupal_basename($file->uri);
    $file->filemime = file_get_mimetype($file->uri);
    $file->filesize = filesize($file->uri);
    $file->uid = $user->uid;
    $file->status = FILE_STATUS_PERMANENT;
    file_transfer($file->uri, file_get_content_headers($file));
  }
  drupal_not_found();
}
